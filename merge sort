#include<stdio.h>
void Merge(int A[],int start,int mid,int end,int n){
	int i=start;
	int j=mid+1;
	int B[end-start+1];
	int k=0;
	while(i<=mid && j<=end){
		if(A[i]<A[j]){
			B[k++]=A[i++];
		}
		else B[k++]=A[j++];
	}
	while(i<=mid)B[k++]=A[i++];
	while(j<=end)B[k++]=A[j++];
	k=0;
	// copying to array B to real array A
	for(int i=start;i<=end;i++){
		A[i]=B[k++];
	}
}
void MergeSort(int A[],int start,int end,int n){
	// base case
	if(start>=end)return;
	
	// breaking to mid point
	int mid=(start+end)/2;
	
	// sending first part for again breaking
	MergeSort(A,start,mid,n);
	
	// sending second part for again breaking
	MergeSort(A,mid+1,end,n);
	
	//merging sorted both parts in backtracking
	Merge(A,start,mid,end,n);
}
int main(){
	int n;
	scanf("%d",&n);
	int A[n];
	for(int i=0;i<n;i++){
		scanf("%d",&A[i]);
	}
	
	// calling merge sort (function)
	MergeSort(A,0,n-1,n);
	
	for(int i=0;i<n;i++){
		printf("%d ",A[i]);
	}
}
